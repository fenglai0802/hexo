<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>黑月的BLooooog</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2016-08-28T07:35:38.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>黑月</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>不同unicode编码的空格挖的坑</title>
    <link href="http://yoursite.com/2016/08/04/%E4%B8%8D%E5%90%8Cunicode%E7%BC%96%E7%A0%81%E7%9A%84%E7%A9%BA%E6%A0%BC%E6%8C%96%E7%9A%84%E5%9D%91/"/>
    <id>http://yoursite.com/2016/08/04/不同unicode编码的空格挖的坑/</id>
    <published>2016-08-04T09:33:14.000Z</published>
    <updated>2016-08-28T07:35:38.000Z</updated>
    
    <content type="html"><![CDATA[<p>前段时间在做搜索的时候，遇到一个关于空格的小问题，总结一下。</p>
<p>有时在文本值中会插入一些空格字符 （Unicode 字符集值 32 和 160） ，比如说标题之类的。当你对包含空格的值进行<strong>排序、 筛选或搜索</strong>时，这些字符有时会导致意外的结果。本次就是因为把数据存放在dom节点上，取出来做搜索的时候，发现编码发现了改变（从32变成了160），导致无法正确匹配。</p>
<blockquote>
<p>The non-breaking space (U+00A0 Unicode, 160 decimal, &nbsp;) is not the same as the space character (U+0020 Unicode, 32 decimal). Well, both of them seems to be a “space”, but they are absolutely different characters.</p>
</blockquote>
<p>这里的解决方案是：采用正则替换成统一字符，如下</p>
<pre><code>var s = &apos; &apos; // 假设这里是一个160的空格。
var reg = new RegExp(String.fromCharCode(160),&quot;gm&quot;);
var 32sp = String.fromCharCode(32)
s = s.replace(reg, 32sp);
</code></pre><p>后来重构代码，直接废除了将数据存在dom上这种方案，就更好了。</p>
<p>除了空格字符，非打印字符在进行<strong>排序、 筛选或搜索</strong>操作时，也可能会遇到这类问题，<a href="https://support.office.com/zh-cn/article/%E5%88%A0%E9%99%A4%E6%96%87%E6%9C%AC%E4%B8%AD%E7%9A%84%E7%A9%BA%E6%A0%BC%E5%92%8C%E9%9D%9E%E6%89%93%E5%8D%B0%E5%AD%97%E7%AC%A6-023f3a08-3d56-49e4-bf0c-fe5303222c9d" target="_blank" rel="external">参考</a>。要注意~</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前段时间在做搜索的时候，遇到一个关于空格的小问题，总结一下。&lt;/p&gt;
&lt;p&gt;有时在文本值中会插入一些空格字符 （Unicode 字符集值 32 和 160） ，比如说标题之类的。当你对包含空格的值进行&lt;strong&gt;排序、 筛选或搜索&lt;/strong&gt;时，这些字符有时会导致
    
    </summary>
    
      <category term="JS" scheme="http://yoursite.com/categories/JS/"/>
    
    
      <category term="空白字符" scheme="http://yoursite.com/tags/%E7%A9%BA%E7%99%BD%E5%AD%97%E7%AC%A6/"/>
    
      <category term="编码" scheme="http://yoursite.com/tags/%E7%BC%96%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>鼠标跟随旋转效果实现</title>
    <link href="http://yoursite.com/2016/08/04/%E9%BC%A0%E6%A0%87%E8%B7%9F%E9%9A%8F%E6%97%8B%E8%BD%AC%E6%95%88%E6%9E%9C%E5%AE%9E%E7%8E%B0/"/>
    <id>http://yoursite.com/2016/08/04/鼠标跟随旋转效果实现/</id>
    <published>2016-08-03T16:30:11.000Z</published>
    <updated>2016-08-28T08:03:28.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="鼠标跟随的3D转动"><a href="#鼠标跟随的3D转动" class="headerlink" title="鼠标跟随的3D转动"></a>鼠标跟随的3D转动</h3><p>首先，甩一枚简单的<a href="http://runjs.cn/detail/1hnseaw3" target="_blank" rel="external">demo</a>看下要实现的效果。点击右下角可查看源码。</p>
<p>ok，直接开干，这个demo里面主要用到了两个属性：<code>transform</code>和<code>perspective</code>。分别可以设置3D和透视投影的效果。</p>
<h3 id="3D变换效果"><a href="#3D变换效果" class="headerlink" title="3D变换效果"></a>3D变换效果</h3><p>首先介绍下<code>transform</code>，写过一丢丢动画的孩子都会接触过的属性。<code>CSS3</code>的3D效果是使用<code>transform</code>的<code>rotateX(Y, Z)</code>，<code>translateX(Y, Z)</code>，<code>scaleX(Y, Z)</code>方法进行设置的。</p>

<p>上图就是一个3D坐标系，需要注意的是，3D元素的原点应该是在元素的中心，而不是像上图一样在立方体的一个角上。如果只是单单一个元素的话，它的形状就是一个平面区域。下面简单介绍一下<code>transform</code>中相关的3D方法。</p>
<h5 id="rotateX-Y-Z"><a href="#rotateX-Y-Z" class="headerlink" title="rotateX(Y, Z)"></a>rotateX(Y, Z)</h5><p>顾名思义就是绕着X轴（Y轴或者Z轴）旋转。注意：<strong>逆时针为正方向</strong>（如图）</p>
<h5 id="translateX-Y-Z"><a href="#translateX-Y-Z" class="headerlink" title="translateX(Y, Z)"></a>translateX(Y, Z)</h5><p>默认情况下，开启的是平面投影，所以此时设置<code>translateZ</code>是没有什么luan用的。那怎么生效呢，看下去才告诉你（╭(╯^╰)╮）。</p>
<h5 id="scaleX-Y-Z"><a href="#scaleX-Y-Z" class="headerlink" title="scaleX(Y, Z)"></a>scaleX(Y, Z)</h5><p>缩放，好理解。偶尔会用来做字号的特殊处理，比如像chrome默认的最小字号是<code>12px</code>，要是你家视觉非要设置<code>10px</code>大小的字体咋整，那就给他一巴掌，叫他要求这么多（现实情况是可以用这个属性来解决……）。</p>
<p>题外话：chrome的默认最小字号可以在设置中更改，不过你的用户可不管这些。</p>
<hr>
<h5 id="transform-style属性"><a href="#transform-style属性" class="headerlink" title="transform-style属性"></a>transform-style属性</h5><p>它有两个值：</p>
<ul>
<li><code>flat</code>(默认，顾名思义就是平面状态，所以上面说的设置translateZ才会失效。)</li>
<li><code>preserve-3d</code></li>
</ul>
<p>聪明如你马上明白<code>preserve-3d</code>才是主角，设置了<code>transform-style: preserve-3d</code>的父元素会生成一个3D空间，把所有的<strong>子元素</strong>都包括在这个3D空间内。</p>
<p><strong>注意</strong>：上面说的是<strong>子元素</strong> ，不是<strong>后代元素</strong>，看看demo中的<code>我是preserve-3d的孙子</code>这行字所在的元素，Z值和它爸爸<code>黑月</code>是不同的，但是转动卡片发现，视觉效果上他们是在同一个Z值平面的。那要让孙子上的Z值也生效呢？啥，你还不知道！那你再看一遍上面的两段话- -。（答案：在<code>黑月</code>上再设置一次这个属性，可以在demo上尝试修改下看看）。</p>
<p>对于父元素设置的<code>transform</code>属性，都会应用到生成的这个3D空间，对整个空间进行3D操作（旋转，平移，缩放）。最后会把所有的元素投影到<code>屏幕</code>上，不是父元素上！</p>
<p>当<code>transform-style</code>的值为<code>flat</code>时，子元素和父元素是互相独立的，并没有在父元素的3D空间内，他们各自做各自的3D变换，然后<strong>按照先后顺序</strong>投影到父元素上。这也是<code>flat</code>时，translateZ失效的原因。</p>
<p><strong>tips</strong>：设置在transform属性上的<code>rotateX(Y, Z)</code>，<code>translateX(Y, Z)</code>，<code>scaleX(Y, Z)</code>方法是从右向左执行的。</p>
<hr>
<h3 id="透视投影"><a href="#透视投影" class="headerlink" title="透视投影"></a>透视投影</h3><p>透视投影是模拟人眼的图像观察方式，让平面上的物体呈现现实的视觉效果。</p>
<p>有两种设置方式：</p>
<ul>
<li><code>perspective: none | &lt;length&gt;;</code></li>
<li><code>transform: perspective(&lt;length&gt;) method(p) method(p) ...;</code></li>
</ul>
<p>第一种：可以将<strong>子元素</strong>(不包含自身，不包括后代元素)的投影效果设置为透视投影。<br>第二种：为这个元素自身开启透视投影模式。</p>
<p>先看下<strong>3D视角</strong>的原理图，来自<a href="https://css-tricks.com/tour-performant-responsive-css-site/" target="_blank" rel="external">这里</a></p>
<p><img src="./images/鼠标跟随旋转效果实现/透视原理图.png" alt=""></p>
<p>图中淡蓝色部分即电脑屏幕所在的平面（z=0的平面），眼睛所在的位置就是通过<code>perspective</code>设置的模拟焦点位置，焦点到z=0平面的距离就是<code>perspective</code>的值，而橘红色部分就是设置了<code>translateZ</code>为负值的3D元素的所在平面，3D元素到z=0平面的距离就是3D元素上<code>translateZ</code>的值，如图为负值，如果在焦点和z=0及平面之间，则为正值。</p>
<p>这是透视的<strong>平面</strong>原理图，来自<a href="https://segmentfault.com/a/1190000003843764" target="_blank" rel="external">这里</a>。<br></p>
<p>通过这两张图，应该能够很直观的看出<code>perspective</code>和<code>translateZ</code>的设置对于3D元素在屏幕上产生的投影的效果了。当元素的z值大于’perspective’的值时，你就看不见它了，就像你的boss站在你的脑袋后面一样一样。一般情况下，’perspective’设置500px到1000px在视觉上比较合理。</p>
<p>在<a href="http://runjs.cn/detail/1hnseaw3" target="_blank" rel="external">demo</a>中，如果取消<code>perspective</code>透视属性，你会发现，卡片就像一个没固定好的相框在转动，这就算是透视属性的必要性。</p>
<p>透视投影还可以设置焦点的位置（默认在中心），因为你的脑袋也是可以动的：</p>
<p><code>perspective-origin: x y;</code></p>
<p><strong>到这里，3d和透视投影的相关属性就介绍完了，有什么不清楚的你可以改改<a href="http://runjs.cn/detail/1hnseaw3" target="_blank" rel="external">demo</a>测试下。</strong></p>
<p>对不起，还没完……</p>
<hr>
<h3 id="鼠标跟随的实现"><a href="#鼠标跟随的实现" class="headerlink" title="鼠标跟随的实现"></a>鼠标跟随的实现</h3><p>关键是理清前面的属性，最后的鼠标跟随转动效果通过js实现应该比较简单了，监听<code>mousemove</code>事件，根据鼠标位置到3D元素的中心的<code>距离</code>，<code>除以</code>一定的<code>系数</code>，实时改变元素的<code>rotateX</code>和<code>rotateY</code>的值来达到效果。你可以通过改变<code>系数</code>的大小来控制<code>转动的灵敏度</code>。</p>
<p>贴一下代码：</p>
<pre><code>var o = $(&quot;#card&quot;);
$(&quot;#top&quot;).on(&quot;mousemove&quot;, function(t) {
    var e = -($(window).innerWidth() / 2 - t.pageX) / 20,
        n = ($(window).innerHeight() / 2 - t.pageY) / 10;
    o.attr(&quot;style&quot;,
        &quot;transform: rotateY(&quot; + e + &quot;deg) rotateX(&quot; + n + &quot;deg);
        -webkit-transform: rotateY(&quot; + e + &quot;deg) rotateX(&quot; + n + &quot;deg);
        -moz-transform: rotateY(&quot; + e + &quot;deg) rotateX(&quot; + n + &quot;deg)&quot;
    )
})
</code></pre><hr>
<p><strong> THE END……能看到这里的人真是让俺感动啊~</strong></p>
<p>养成好习惯，顺手打广告：这个动效用在了<a href="https://youdata.netease.com/" target="_blank" rel="external">网易有数</a>的首页。<strong>网易有数</strong>是一款敏捷数据分析平台，欢迎使用体验。</p>
<p>参考自：</p>
<ul>
<li><a href="https://css-tricks.com/tour-performant-responsive-css-site/" target="_blank" rel="external">Tour of a Performant and Responsive CSS Only Site</a></li>
<li><a href="https://segmentfault.com/a/1190000003843764" target="_blank" rel="external">3D效果 &amp; 透视</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;鼠标跟随的3D转动&quot;&gt;&lt;a href=&quot;#鼠标跟随的3D转动&quot; class=&quot;headerlink&quot; title=&quot;鼠标跟随的3D转动&quot;&gt;&lt;/a&gt;鼠标跟随的3D转动&lt;/h3&gt;&lt;p&gt;首先，甩一枚简单的&lt;a href=&quot;http://runjs.cn/detail/1
    
    </summary>
    
      <category term="CSS" scheme="http://yoursite.com/categories/CSS/"/>
    
    
      <category term="3d" scheme="http://yoursite.com/tags/3d/"/>
    
      <category term="转动" scheme="http://yoursite.com/tags/%E8%BD%AC%E5%8A%A8/"/>
    
  </entry>
  
  <entry>
    <title>Hexo + GitHub Pages 构建博客</title>
    <link href="http://yoursite.com/2016/08/03/Hexo-GitHub-Pages-%E6%9E%84%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>http://yoursite.com/2016/08/03/Hexo-GitHub-Pages-构建博客/</id>
    <published>2016-08-03T04:54:27.000Z</published>
    <updated>2016-08-04T02:34:53.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-介绍篇"><a href="#1-介绍篇" class="headerlink" title="1. 介绍篇"></a>1. 介绍篇</h2><p><a href="https://fenglai0802.github.io/" target="_blank" rel="external">DEMO</a></p>
<h4 id="什么是Hexo"><a href="#什么是Hexo" class="headerlink" title="什么是Hexo"></a>什么是Hexo</h4><p><a href="https://hexo.io/" target="_blank" rel="external">Hexo</a> 是一个简单地、轻量地、基于Node的一个静态博客框架，可以方便的生成静态网页。作者是台湾大学生tommy351。</p>
<h4 id="什么是GitHub-Pages"><a href="#什么是GitHub-Pages" class="headerlink" title="什么是GitHub Pages"></a>什么是GitHub Pages</h4><p><a href="https://pages.github.com/" target="_blank" rel="external">GitHub Pages</a> 可以被认为是用户编写的、托管在github上的静态网页。由于它的空间免费稳定， 可以用于介绍托管在github上的Project或者搭建网站。有两种形式: Project Site 和 User/Org Site。</p>
<p>GitHub Pages 生成的网站的默认域名是 username.github.io 或者 username.github.io/project-name ，但GitHub Pages是支持自定义域名的，参考教程：<a href="https://www.zhihu.com/question/31377141" target="_blank" rel="external">github怎么绑定自己的域名</a></p>
<h2 id="2-安装篇"><a href="#2-安装篇" class="headerlink" title="2. 安装篇"></a>2. 安装篇</h2><h4 id="安装中的一些小问题提醒"><a href="#安装中的一些小问题提醒" class="headerlink" title="安装中的一些小问题提醒"></a>安装中的一些小问题提醒</h4><ol>
<li>npm 报连接错误导致的安装失败：建议使用<a href="http://npm.taobao.org/" target="_blank" rel="external">淘宝NPM镜像</a>。</li>
<li>权限错误：命令前加sudo</li>
</ol>
<h4 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h4><ul>
<li>安装node (建议采用<a href="https://fenglai0802.github.io/2016/08/03/%E5%88%A9%E7%94%A8%E6%A8%A1%E5%9D%97n%E7%AE%A1%E7%90%86node%E7%89%88%E6%9C%AC/" target="_blank" rel="external">n模块安装</a>)</li>
<li>安装git（安装Xcode自带）</li>
<li>申请github账号</li>
</ul>
<h4 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h4><ol>
<li><p>首先全局安装hexo</p>
<pre><code>$ npm install -g hexo
</code></pre></li>
</ol>
<ol>
<li><p>创建工作文件夹，举例命名为<code>blog</code>;</p>
</li>
<li><p>进入<code>blog</code>，初始化：</p>
<pre><code>$ hexo init
</code></pre></li>
</ol>
<p>这里可能出现初始化错误，原因就是默认的npm出现连接错误，你需要手动执行<code>$ cnpm install</code>。<br>cnpm就是淘宝镜像的命令。</p>
<ol>
<li><p>安装server，用于本地调试：</p>
<pre><code>$ cnpm install hexo-server --save
</code></pre></li>
</ol>
<p>如果不安装，现在的版本是不在带服务器的，导致后面执行<code>hexo server</code>报没有命令的错误。</p>
<ol>
<li><p>生成静态页面：</p>
<pre><code>$ hexo generate 或 $ hexo g
</code></pre></li>
<li><p>启动本地服务，进行文章预览调试：</p>
<pre><code>$ $hexo server或 $ hexo s。
</code></pre></li>
</ol>
<p>启动成功，根据提示在浏览器浏览器输入 <a href="http://localhost:4000" target="_blank" rel="external">http://localhost:4000</a> 即可查看。</p>
<h4 id="hexo一些常用命令-可以通过hexo-help查看-："><a href="#hexo一些常用命令-可以通过hexo-help查看-：" class="headerlink" title="hexo一些常用命令(可以通过hexo help查看)："></a>hexo一些常用命令(可以通过<code>hexo help</code>查看)：</h4><ul>
<li><p><code>hexo new &quot;postName&quot;</code> #新建文章</p>
</li>
<li><p><code>hexo new page &quot;pageName&quot;</code> #新建页面</p>
</li>
<li><p><code>hexo generate</code> #生成静态页面至public目录</p>
</li>
<li><p><code>hexo server</code> #开启预览访问端口（默认端口4000，’ctrl + c’关闭server）</p>
</li>
<li><p><code>hexo deploy</code> #将.deploy目录部署到GitHub</p>
</li>
<li><p><code>hexo help</code> # 查看帮助</p>
</li>
<li><p><code>hexo version</code> #查看Hexo的版本</p>
</li>
</ul>
<h4 id="hexo关联配置Github"><a href="#hexo关联配置Github" class="headerlink" title="hexo关联配置Github"></a>hexo关联配置Github</h4><ul>
<li><p>关联之前，你得先创建好自己的<a href="https://pages.github.com/" target="_blank" rel="external">GitHub Pages</a>，按着官方教程一步步来，或者自己google。</p>
</li>
<li><p>修改<code>blog</code>下的配置文件<code>_config.xml</code>:（repo的地址写你自己的GitHub Pages项目地址啊）</p>
<pre><code>deploy:

     type: git

     repo: https://github.com/fenglai0802/fenglai0802.github.io.git

    branch: master
</code></pre></li>
<li><p>安装发布命令：</p>
<pre><code>$ cnpm install hexo-deployer-git --save
</code></pre></li>
<li><p>执行命名：</p>
<pre><code>$ hexo deploy
</code></pre></li>
</ul>
<p>此时public文件夹下的内容就会被上传到你的github中fenglai0802.github.io的这个项目下。</p>
<ul>
<li><p>然后再浏览器中输入 <a href="https://fenglai0802.github.io/" target="_blank" rel="external">https://fenglai0802.github.io/</a> 就可以查看了。</p>
</li>
<li><p>每次部署的步骤，可按以下三步来进行。(建议自己写一个shell方便发布)</p>
<pre><code>$ hexo clean

$ hexo generate

$ hexo deploy
</code></pre></li>
</ul>
<h2 id="3-hexo主题篇"><a href="#3-hexo主题篇" class="headerlink" title="3. hexo主题篇"></a>3. hexo主题篇</h2><ul>
<li><a href="https://github.com/hexojs/hexo/wiki/Themes" target="_blank" rel="external">主题汇总</a>。使用方法里面也有介绍，简单讲就是把主题克隆到theme文件夹，然后修改_config.yml配置文件中的theme选项就行。</li>
<li>这里比较推荐主题<a href="https://github.com/iissnan/hexo-theme-next" target="_blank" rel="external">NexT</a>。自用就是这个，哈哈~</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-介绍篇&quot;&gt;&lt;a href=&quot;#1-介绍篇&quot; class=&quot;headerlink&quot; title=&quot;1. 介绍篇&quot;&gt;&lt;/a&gt;1. 介绍篇&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://fenglai0802.github.io/&quot; target=&quot;_blank&quot;
    
    </summary>
    
      <category term="常规" scheme="http://yoursite.com/categories/%E5%B8%B8%E8%A7%84/"/>
    
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
      <category term="github" scheme="http://yoursite.com/tags/github/"/>
    
      <category term="博客" scheme="http://yoursite.com/tags/%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>利用模块n管理node版本</title>
    <link href="http://yoursite.com/2016/08/03/%E5%88%A9%E7%94%A8%E6%A8%A1%E5%9D%97n%E7%AE%A1%E7%90%86node%E7%89%88%E6%9C%AC/"/>
    <id>http://yoursite.com/2016/08/03/利用模块n管理node版本/</id>
    <published>2016-08-03T02:44:47.000Z</published>
    <updated>2016-08-04T02:35:02.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="利用模块n管理node版本"><a href="#利用模块n管理node版本" class="headerlink" title="利用模块n管理node版本"></a>利用模块n管理node版本</h3><ul>
<li>由于node的版本迭代速度非常快，所以版本多样，所以升级版本或者切换版本都比较麻烦。本文介绍一下模块n的好处。</li>
</ul>
<h5 id="n"><a href="#n" class="headerlink" title="n"></a>n</h5><ul>
<li><p>n是node的一个模块，作者是TJ Holowaychuk（鼎鼎大名的Express框架作者），就像它的名字一样，它的理念就是简单：</p>
<blockquote>
<p>no subshells, no profile setup, no convoluted api, just simple</p>
</blockquote>
</li>
<li><p>安装n</p>
<pre><code>$ sudo npm install -g n
</code></pre></li>
<li><p>安装完成之后，直接输入n后控制台就会输出当前已安装的node版本以及正在使用的版本（前面有个o的），通过上下方向键来选择想要使用的版本，回车生效。</p>
<pre><code>$ n
    0.10.1
o   6.0.0
</code></pre></li>
<li><p>安装指定版本node</p>
<pre><code>$ n 6.0.0
</code></pre></li>
<li><p>安装最新版本node</p>
<pre><code>$ n latest
</code></pre></li>
<li><p>安装稳定版本node</p>
<pre><code>$ n stable
</code></pre></li>
<li><p>删除某个版本</p>
<pre><code>$ n rm 0.10.1
</code></pre></li>
<li><p>以指定的版本来执行脚本</p>
<pre><code>$ n use 0.10.21 some.js
</code></pre></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;利用模块n管理node版本&quot;&gt;&lt;a href=&quot;#利用模块n管理node版本&quot; class=&quot;headerlink&quot; title=&quot;利用模块n管理node版本&quot;&gt;&lt;/a&gt;利用模块n管理node版本&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;由于node的版本迭代速度非常快，所以版
    
    </summary>
    
      <category term="常规" scheme="http://yoursite.com/categories/%E5%B8%B8%E8%A7%84/"/>
    
    
      <category term="node版本" scheme="http://yoursite.com/tags/node%E7%89%88%E6%9C%AC/"/>
    
  </entry>
  
</feed>
